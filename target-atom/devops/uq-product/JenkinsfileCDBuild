def label = "uq_uq-product-${UUID.randomUUID().toString()}"
def serviceAccount = "jenkins-uq"
def serviceName = "uq-product"

def notifyStarted() {
    mattermostSend color: 'good', message: "STARTED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})"
}

def notifySuccessful(message) {
    mattermostSend color: 'good', message: "SUCCEED: Job [${env.JOB_NAME}${env.BUILD_DISPLAY_NAME}](${env.BUILD_URL})\n${message}"
}

def notifyFailed(message) {
  mattermostSend color: 'danger', message: "FAILED: Job [${env.JOB_NAME}${env.BUILD_DISPLAY_NAME}](${env.BUILD_URL})\n${message}"
}

String getBranchName(branch) {
  branchTemp=sh returnStdout:true ,script:"""echo "$branch" |sed -E "s#origin/##g" """
  if(branchTemp){
    branchTemp=branchTemp.trim()
  }
  return branchTemp
}

podTemplate(label: label, serviceAccount: serviceAccount,
//podTemplate(label: label, serviceAccount: serviceAccount, nodeSelector:"uq-node=true",
	containers: [
		containerTemplate(name: 'maven', image: 'ktis-bastion01.container.ipc.kt.com:5000/admin/maven:3.3.9-jdk-8-alpine', ttyEnabled: true, command: 'cat', 
			resourceRequestCpu: "400m", resourceLimitCpu: "1000m", resourceRequestMemory: "500Mi", resourceLimitMemory: "2Gi"),
		containerTemplate(name: 'docker', image: 'ktis-bastion01.container.ipc.kt.com:5000/admin/docker:stable', ttyEnabled: true, command: 'cat',
			resourceRequestCpu: "10m", resourceLimitCpu: "100m", resourceRequestMemory: "100Mi", resourceLimitMemory: "300Mi"),
		containerTemplate(name: 'curl-jq', image: 'ktis-bastion01.container.ipc.kt.com:5000/admin/alpine-curl-jq-millet:1.0', command: 'cat', ttyEnabled: true,
			resourceRequestCpu: "10m", resourceLimitCpu: "10m", resourceRequestMemory: "10Mi",  resourceLimitMemory: "10Mi"),
		containerTemplate(name: 'jnlp', image: 'ktis-bastion01.container.ipc.kt.com:5000/jenkins/jnlp-slave:alpine', args: '${computer.jnlpmac} ${computer.name}',
			resourceRequestCpu: "100m", resourceLimitCpu: "200m", resourceRequestMemory: "500Mi", resourceLimitMemory: "1000Mi")
	],
	volumes: [
	    hostPathVolume(hostPath: '/var/run/docker.sock', mountPath: '/var/run/docker.sock')
//	    hostPathVolume(hostPath: '/var/run/docker.sock', mountPath: '/var/run/docker.sock'),
//        persistentVolumeClaim(mountPath: '/home/jenkins', claimName: 'jenkins-slave-pvc', readOnly: false)
	    ]
	) {
	
	node(label) {
	try {
		//notifyStarted()
		def autoCancelled = false
		
		def branchTemp
		//branch Name Parsing
		branchTemp = params.branchName
			
		branchName=getBranchName(branchTemp)
		
		def milestone
		milestone=params.version
	  
		//null check 
		if(!branchName || !milestone){
			throw new Exception("Value is null")
		}
	  
		stage('Get Source') {
		    sh """
		       	git config --global user.email "jenkins@kt.com"
    			git config --global user.name "jenkins"
    			git config --global credential.helper cache
                git config --global push.default simple
            """
			git url: "http://10.217.59.20/usage-query/usage-query.git",
				credentialsId: 'git-credentials',
				branch: "${branchName}"
		}
		
		def props = readProperties  file:'devops/' + serviceName + '/pipelineCDBuild.properties'
		def dockerRegistry = props['dockerRegistry']
		def image = props['image']
		def gitProjectUrl = props['gitProjectUrl']
		def mvnSettings = "${env.WORKSPACE}/devops/" + serviceName + "/settings.xml"
		
		//null check 
		if(!dockerRegistry || !image || !gitProjectUrl || !mvnSettings){
			throw new Exception("Value is null")
		}
		
		stage('Check Milestone'){
			container('curl-jq'){
				withCredentials([string(credentialsId: 'gitlab-secret-token', variable: 'TOKEN')]){		
					
					result = sh returnStdout:true, script: """curl --header PRIVATE-TOKEN:$TOKEN ${gitProjectUrl}/milestones?state=active | jq -r '.[].title' | grep ${milestone} | wc -l"""
					result = result.toInteger()
					
					if ( result == 0 ){
					   autoCancelled = true
					   error('Error MileStone(version) is not opend')
					}
				}
			}
		}
		
		stage('Check Tag'){
			container('curl-jq'){
				withCredentials([string(credentialsId: 'gitlab-secret-token', variable: 'TOKEN')]){

					result = sh returnStdout:true, script: """curl --header PRIVATE-TOKEN:$TOKEN ${gitProjectUrl}/repository/tags | jq -r '.[].name' | grep ${serviceName}-v${milestone} | wc -l"""
					result = result.toInteger()
					
					if ( result != 0 ){
					   autoCancelled = true
					   error('Error Already builded Tag is exist')
					}
				}
			}
		}

		stage('Unit Test'){
			container('maven') {
				//sh "mvn test --settings ${mvnSettings} --projects usage-query-service"
			}
		}

		stage('maven build project') {
			container('maven') {
				//sh "mvn clean install -DskipTests --settings ${mvnSettings} --projects usage-query-service"
				sh "mvn clean install -DskipTests --settings ${mvnSettings}"
			}
		}
	  
		stage('Build Docker image') {
			container('docker') {
				docker.withRegistry("${dockerRegistry}", 'cluster-registry-credentials'){
					sh "docker build -t ${image}:${milestone} . -f ./devops/" + serviceName + "/Dockerfile"
					sh "docker push ${image}:${milestone}"
					sh "docker tag ${image}:${milestone} ${image}:latest"
					sh "docker push ${image}:latest"
				}
			}
		}
		stage('Image Inspection') {		
			sh "echo 'Will be implement / VA || Fortify'"
		}

		stage('tagging Version') {
			withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'git-credentials', passwordVariable: 'GIT_PASSWORD', usernameVariable: 'GIT_USERNAME']]) {
				sh """
					git tag -a ${serviceName}-v${milestone} -m "jenkins added"
					git push http://10.217.59.20/usage-query/usage-query.git --tags
					
					git config --global --unset credential.helper
				"""
			}
		}
		
		//notifySuccessful(buildMessage)
	} catch(e) {
		buildMessage="**Error :: "+ e.toString()+"**"
		print "this build cause error:" + buildMessage
		
        currentBuild.result = "FAILED"
        //notifyFailed(buildMessage)
    }
  }
}
